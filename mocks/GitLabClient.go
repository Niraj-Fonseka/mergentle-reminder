// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "github.com/xanzy/go-gitlab"
)

// GitLabClient is an autogenerated mock type for the GitLabClient type
type GitLabClient struct {
	mock.Mock
}

type GitLabClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLabClient) EXPECT() *GitLabClient_Expecter {
	return &GitLabClient_Expecter{mock: &_m.Mock}
}

// GetMergeRequestApprovalsConfiguration provides a mock function with given fields: projectID, mergeRequestID
func (_m *GitLabClient) GetMergeRequestApprovalsConfiguration(projectID int, mergeRequestID int) (*gitlab.MergeRequestApprovals, *gitlab.Response, error) {
	ret := _m.Called(projectID, mergeRequestID)

	var r0 *gitlab.MergeRequestApprovals
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) (*gitlab.MergeRequestApprovals, *gitlab.Response, error)); ok {
		return rf(projectID, mergeRequestID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *gitlab.MergeRequestApprovals); ok {
		r0 = rf(projectID, mergeRequestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequestApprovals)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) *gitlab.Response); ok {
		r1 = rf(projectID, mergeRequestID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(projectID, mergeRequestID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabClient_GetMergeRequestApprovalsConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequestApprovalsConfiguration'
type GitLabClient_GetMergeRequestApprovalsConfiguration_Call struct {
	*mock.Call
}

// GetMergeRequestApprovalsConfiguration is a helper method to define mock.On call
//   - projectID int
//   - mergeRequestID int
func (_e *GitLabClient_Expecter) GetMergeRequestApprovalsConfiguration(projectID interface{}, mergeRequestID interface{}) *GitLabClient_GetMergeRequestApprovalsConfiguration_Call {
	return &GitLabClient_GetMergeRequestApprovalsConfiguration_Call{Call: _e.mock.On("GetMergeRequestApprovalsConfiguration", projectID, mergeRequestID)}
}

func (_c *GitLabClient_GetMergeRequestApprovalsConfiguration_Call) Run(run func(projectID int, mergeRequestID int)) *GitLabClient_GetMergeRequestApprovalsConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *GitLabClient_GetMergeRequestApprovalsConfiguration_Call) Return(_a0 *gitlab.MergeRequestApprovals, _a1 *gitlab.Response, _a2 error) *GitLabClient_GetMergeRequestApprovalsConfiguration_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitLabClient_GetMergeRequestApprovalsConfiguration_Call) RunAndReturn(run func(int, int) (*gitlab.MergeRequestApprovals, *gitlab.Response, error)) *GitLabClient_GetMergeRequestApprovalsConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupProjects provides a mock function with given fields: groupID, options
func (_m *GitLabClient) ListGroupProjects(groupID int, options *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error) {
	ret := _m.Called(groupID, options)

	var r0 []*gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error)); ok {
		return rf(groupID, options)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.ListGroupProjectsOptions) []*gitlab.Project); ok {
		r0 = rf(groupID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.ListGroupProjectsOptions) *gitlab.Response); ok {
		r1 = rf(groupID, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.ListGroupProjectsOptions) error); ok {
		r2 = rf(groupID, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabClient_ListGroupProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupProjects'
type GitLabClient_ListGroupProjects_Call struct {
	*mock.Call
}

// ListGroupProjects is a helper method to define mock.On call
//   - groupID int
//   - options *gitlab.ListGroupProjectsOptions
func (_e *GitLabClient_Expecter) ListGroupProjects(groupID interface{}, options interface{}) *GitLabClient_ListGroupProjects_Call {
	return &GitLabClient_ListGroupProjects_Call{Call: _e.mock.On("ListGroupProjects", groupID, options)}
}

func (_c *GitLabClient_ListGroupProjects_Call) Run(run func(groupID int, options *gitlab.ListGroupProjectsOptions)) *GitLabClient_ListGroupProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*gitlab.ListGroupProjectsOptions))
	})
	return _c
}

func (_c *GitLabClient_ListGroupProjects_Call) Return(_a0 []*gitlab.Project, _a1 *gitlab.Response, _a2 error) *GitLabClient_ListGroupProjects_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitLabClient_ListGroupProjects_Call) RunAndReturn(run func(int, *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error)) *GitLabClient_ListGroupProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMergeRequests provides a mock function with given fields: projectID, options
func (_m *GitLabClient) ListProjectMergeRequests(projectID int, options *gitlab.ListProjectMergeRequestsOptions) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	ret := _m.Called(projectID, options)

	var r0 []*gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.ListProjectMergeRequestsOptions) ([]*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return rf(projectID, options)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.ListProjectMergeRequestsOptions) []*gitlab.MergeRequest); ok {
		r0 = rf(projectID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.MergeRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.ListProjectMergeRequestsOptions) *gitlab.Response); ok {
		r1 = rf(projectID, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.ListProjectMergeRequestsOptions) error); ok {
		r2 = rf(projectID, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabClient_ListProjectMergeRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMergeRequests'
type GitLabClient_ListProjectMergeRequests_Call struct {
	*mock.Call
}

// ListProjectMergeRequests is a helper method to define mock.On call
//   - projectID int
//   - options *gitlab.ListProjectMergeRequestsOptions
func (_e *GitLabClient_Expecter) ListProjectMergeRequests(projectID interface{}, options interface{}) *GitLabClient_ListProjectMergeRequests_Call {
	return &GitLabClient_ListProjectMergeRequests_Call{Call: _e.mock.On("ListProjectMergeRequests", projectID, options)}
}

func (_c *GitLabClient_ListProjectMergeRequests_Call) Run(run func(projectID int, options *gitlab.ListProjectMergeRequestsOptions)) *GitLabClient_ListProjectMergeRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*gitlab.ListProjectMergeRequestsOptions))
	})
	return _c
}

func (_c *GitLabClient_ListProjectMergeRequests_Call) Return(_a0 []*gitlab.MergeRequest, _a1 *gitlab.Response, _a2 error) *GitLabClient_ListProjectMergeRequests_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitLabClient_ListProjectMergeRequests_Call) RunAndReturn(run func(int, *gitlab.ListProjectMergeRequestsOptions) ([]*gitlab.MergeRequest, *gitlab.Response, error)) *GitLabClient_ListProjectMergeRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubGroups provides a mock function with given fields: groupID, opt, options
func (_m *GitLabClient) ListSubGroups(groupID int, opt *gitlab.ListSubGroupsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, groupID, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.Group
	var r1 *gitlab.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(int, *gitlab.ListSubGroupsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error)); ok {
		return rf(groupID, opt, options...)
	}
	if rf, ok := ret.Get(0).(func(int, *gitlab.ListSubGroupsOptions, ...gitlab.RequestOptionFunc) []*gitlab.Group); ok {
		r0 = rf(groupID, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *gitlab.ListSubGroupsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(groupID, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(int, *gitlab.ListSubGroupsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(groupID, opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabClient_ListSubGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubGroups'
type GitLabClient_ListSubGroups_Call struct {
	*mock.Call
}

// ListSubGroups is a helper method to define mock.On call
//   - groupID int
//   - opt *gitlab.ListSubGroupsOptions
//   - options ...gitlab.RequestOptionFunc
func (_e *GitLabClient_Expecter) ListSubGroups(groupID interface{}, opt interface{}, options ...interface{}) *GitLabClient_ListSubGroups_Call {
	return &GitLabClient_ListSubGroups_Call{Call: _e.mock.On("ListSubGroups",
		append([]interface{}{groupID, opt}, options...)...)}
}

func (_c *GitLabClient_ListSubGroups_Call) Run(run func(groupID int, opt *gitlab.ListSubGroupsOptions, options ...gitlab.RequestOptionFunc)) *GitLabClient_ListSubGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), args[1].(*gitlab.ListSubGroupsOptions), variadicArgs...)
	})
	return _c
}

func (_c *GitLabClient_ListSubGroups_Call) Return(_a0 []*gitlab.Group, _a1 *gitlab.Response, _a2 error) *GitLabClient_ListSubGroups_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GitLabClient_ListSubGroups_Call) RunAndReturn(run func(int, *gitlab.ListSubGroupsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Group, *gitlab.Response, error)) *GitLabClient_ListSubGroups_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGitLabClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGitLabClient creates a new instance of GitLabClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGitLabClient(t mockConstructorTestingTNewGitLabClient) *GitLabClient {
	mock := &GitLabClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
