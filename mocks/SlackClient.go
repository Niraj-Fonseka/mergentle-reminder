// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

type SlackClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackClient) EXPECT() *SlackClient_Expecter {
	return &SlackClient_Expecter{mock: &_m.Mock}
}

// PostWebhook provides a mock function with given fields: payload
func (_m *SlackClient) PostWebhook(payload *slack.WebhookMessage) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*slack.WebhookMessage) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackClient_PostWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostWebhook'
type SlackClient_PostWebhook_Call struct {
	*mock.Call
}

// PostWebhook is a helper method to define mock.On call
//   - payload *slack.WebhookMessage
func (_e *SlackClient_Expecter) PostWebhook(payload interface{}) *SlackClient_PostWebhook_Call {
	return &SlackClient_PostWebhook_Call{Call: _e.mock.On("PostWebhook", payload)}
}

func (_c *SlackClient_PostWebhook_Call) Run(run func(payload *slack.WebhookMessage)) *SlackClient_PostWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slack.WebhookMessage))
	})
	return _c
}

func (_c *SlackClient_PostWebhook_Call) Return(_a0 error) *SlackClient_PostWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackClient_PostWebhook_Call) RunAndReturn(run func(*slack.WebhookMessage) error) *SlackClient_PostWebhook_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSlackClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackClient creates a new instance of SlackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackClient(t mockConstructorTestingTNewSlackClient) *SlackClient {
	mock := &SlackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
